// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function print(witness, value) {
  var str;
  switch (witness) {
    case /* Int */0 :
        str = String(value);
        break;
    case /* Float */1 :
        str = value.toString();
        break;
    case /* String */2 :
        str = "\"" + (value + "\"");
        break;
    
  }
  console.log(str);
  
}

function map_equal_witness(target, candidate, value, func) {
  switch (target) {
    case /* Int */0 :
        if (candidate !== 0) {
          return value;
        } else {
          return Curry._1(func, value);
        }
    case /* Float */1 :
        if (candidate !== 1) {
          return value;
        } else {
          return Curry._1(func, value);
        }
    case /* String */2 :
        if (candidate >= 2) {
          return Curry._1(func, value);
        } else {
          return value;
        }
    
  }
}

function map_type(ls, witness, func) {
  return List.map((function (param) {
                var w = param._0;
                return /* Item */{
                        _0: w,
                        _1: map_equal_witness(witness, w, param._1, func)
                      };
              }), ls);
}

function test(param) {
  var ls$prime = map_type({
        hd: /* Item */{
          _0: /* Int */0,
          _1: 5
        },
        tl: {
          hd: /* Item */{
            _0: /* String */2,
            _1: "hello"
          },
          tl: {
            hd: /* Item */{
              _0: /* Int */0,
              _1: 2
            },
            tl: {
              hd: /* Item */{
                _0: /* Float */1,
                _1: 3.5
              },
              tl: {
                hd: /* Item */{
                  _0: /* Int */0,
                  _1: 16
                },
                tl: /* [] */0
              }
            }
          }
        }
      }, /* Int */0, (function (n) {
          return (n << 1);
        }));
  return List.iter((function (param) {
                return print(param._0, param._1);
              }), ls$prime);
}

test(undefined);

exports.print = print;
exports.map_equal_witness = map_equal_witness;
exports.map_type = map_type;
exports.test = test;
/*  Not a pure module */
